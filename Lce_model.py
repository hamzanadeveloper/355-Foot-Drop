import collections
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve
from sklearn.linear_model import Ridge
from scipy.special import expit

class HillTypeMuscle:
    """
    Damped Hill-type muscle model adapted from Millard et al. (2013). The
    dynamic model is defined in terms of normalized length and velocity.
    To model a particular muscle, scale factors are needed for force, CE
    length, and SE length. These are given as constructor arguments.
    """

    def __init__(self, f0M, resting_length_muscle, resting_length_tendon):
        """
        :param f0M: maximum isometric force
        :param resting_length_muscle: actual length (m) of muscle (CE) that corresponds to
            normalized length of 1
        :param resting_length_tendon: actual length of tendon (m) that corresponds to
            normalized length of 1
        """
        self.f0M = f0M
        self.resting_length_muscle = resting_length_muscle
        self.resting_length_tendon = resting_length_tendon

    def norm_tendon_length(self, muscle_tendon_length, normalized_muscle_length):
        """
        :param muscle_tendon_length: non-normalized length of the full muscle-tendon
            complex (typically found from joint angles and musculoskeletal geometry)
        :param normalized_muscle_length: normalized length of the contractile element
            (the state variable of the muscle model)
        :return: normalized length of the tendon
        """
        return (muscle_tendon_length - self.resting_length_muscle * normalized_muscle_length) / self.resting_length_tendon

    def get_force(self, total_length, norm_muscle_length):
        """
        :param total_length: muscle-tendon length (m)
        :param norm_muscle_length: normalized length of muscle (the state variable)
        :return: muscle tension (N)
        """

        return self.f0M * force_length_tendon(self.norm_tendon_length(total_length, norm_muscle_length))


def force_length_tendon(lt):
    """
    :param lt: normalized length of tendon (series elastic element)
    :return ft: normalized tension produced by tendon
    """

    lts = 1.0  # slack length of tendon (SE)
    t_norm = []

    if type(lt) is int or type(lt) is float or type(lt) is np.float64:
        lt = np.array([lt])

    for i in range(len(lt)):
        if lt[i] < lts:
            t_norm.append(0)
        else:
            t_norm.append((10.0 * (lt[i] - lts)) + (240.0 * (lt[i] - lts)**2))

    return np.array(t_norm)


def plot_curves():
    """
    Plot force-length, force-velocity, SE, and PE curves.
    """
    lm = np.arange(0, 1.8, .01)
    lt = np.arange(0, 1.07, .01)
    plt.plot(lm, force_length_muscle(lm), 'r')
    plt.plot(lt, force_length_tendon(lt), 'b')
    plt.legend(('CE', 'SE'))
    plt.xlabel('Normalized length')
    plt.ylabel('Force scale factor')
    plt.tight_layout()
    plt.show()


class Gaussian:
    def __init__(self, mu, sigma):
        self.mu = mu
        self.sigma = sigma

    def __call__(self, x):
        return np.exp(-(x-self.mu)**2/2/self.sigma**2)


class Sigmoid:
    def __init__(self, mu, sigma):
        self.mu = mu
        self.sigma = sigma

    def __call__(self, x):
        return expit((x-self.mu) / self.sigma)


class Regression():
    """
    1D regression model with Gaussian basis functions.
    """

    def __init__(self, x, t, centres, width, regularization_weight=1e-6, sigmoids=False):
        """
        :param x: samples of an independent variable
        :param t: corresponding samples of a dependent variable
        :param centres: a vector of Gaussian centres (should have similar range of values as x)
        :param width: sigma parameter of Gaussians
        :param regularization_weight: regularization strength parameter
        """
        if sigmoids:
            self.basis_functions = [Sigmoid(centre, width) for centre in centres]
        else:
            self.basis_functions = [Gaussian(centre, width) for centre in centres]
        self.ridge = Ridge(alpha=regularization_weight, fit_intercept=False)
        self.ridge.fit(self._get_features(x), t)

    def eval(self, x):
        """
        :param x: a new (or multiple samples) of the independent variable
        :return: the value of the curve at x
        """
        return self.ridge.predict(self._get_features(x))

    def _get_features(self, x):
        if not isinstance(x, collections.Sized):
            x = [x]

        phi = np.zeros((len(x), len(self.basis_functions)))
        for i, basis_function in enumerate(self.basis_functions):
            phi[:,i] = basis_function(x)
        return phi



def get_muscle_force_length_regression():
    """
    CE force-length data samples from Winters et al. (2011) Figure 3C,
    normalized so that max force is ~1 and length at max force is ~1.
    The sampples were taken form the paper with WebPlotDigitizer, and
    cut-and-pasted here.

    WRITE CODE HERE 1) Use WebPlotDigitizer to extract force-length points
    from Winters et al. (2011) Figure 3C, which is on Learn. Click
    "View Data", select all, cut, and paste below. 2) Normalize the data
    so optimal length = 1 and peak = 1. 3) Return a Regression object that
    uses Gaussian basis functions. 
    """

    data = np.array([
#        [0.0011405722091840098, 1.660307771069256],
#[0.00417768209178801, 1.6443432732705787],
#[0.006455514503741017, 1.632369899921514],
#[0.011011179327647017, 1.6084231532233844],
#[0.016326121622204023, 1.5804852820756423],
#[0.020122508975459016, 1.5605296598271252],
#[0.024678173799365016, 1.5365829131289956],
#[0.029233838623271016, 1.512636166430866],
#[0.03303022597652602, 1.492680544182349],
#[0.036826613329781016, 1.4727249219340592],
#[0.04366176656884754, 3.1030992596308806],
#[0.04821743139275354, 3.079152512932751],
#[0.052013818746008564, 3.059196890684234],
#[0.05656948356991455, 3.0352501439861044],
#[0.06188442586447153, 3.0073122728383623],
#[0.06719936815902854, 2.9793744016906203],
#[0.07099575551228356, 2.959418779442103],
#[0.07631069780684054, 2.931480908294361],
#[0.08162564010139754, 2.903543037146619],
#[0.08618130492530356, 2.8795962904484895],
#[0.09073531374600201, 1.1893550860063442],
#[0.094531701099257, 1.169399463757827],
#[0.097568810981861, 1.1534349659591498],
#[0.10212447580576701, 1.1294882192610203],
#[0.10895797304162604, 1.093568099213826],
#[0.112754360394881, 1.0736124769655362],
#[0.11655074774813602, 1.053656854717019],
#[0.12110806857524954, 2.6960045657629053],
#[0.12566373339915554, 2.6720578190647757],
#[0.132495574631807, 0.9698432412735656],
#[0.13705123945571301, 0.945896494575436],
#[0.14160856028282653, 2.588244205621322],
#[0.14616256910352504, 0.8980030011791769],
#[0.15147916740128958, 2.5363595877754506],
#[0.15831432064035605, 4.166733925472045],
#[0.16514781787621508, 4.13081380542485],
#[0.17122203764142307, 4.098884809827496],
#[0.17729625740663107, 4.066955814229914],
#[0.18337047717183907, 4.035026818632559],
#[0.18944469693704707, 4.003097823034977],
#[0.19475963923160405, 3.9751599518872354],
#[0.19931530405551007, 3.951213205189106],
#[0.20463024635006705, 3.9232753340413637],
#[0.20842663370332204, 3.9033197117928466],
#[0.2122230210565771, 3.8833640895443295],
#[0.21678034188369066, 5.525711800589988],
#[0.22133435070438906, 3.8354705961480704],
#[0.22664929299894604, 3.8075327250003284],
#[0.23044568035220103, 3.7875771027520386],
#[0.23576062264675807, 3.759639231604069],
#[0.24107556494131505, 3.731701360456327],
#[0.24563122976522106, 3.7077546137581976],
#[0.25170379352722155, 2.0095311604170547],
#[0.25625945835112757, 1.9855844137189251],
#[0.26157440064568455, 1.9576465425709557],
#[0.26764862041089255, 1.9257175469736012],
#[0.27144500776414754, 1.905761924725084],
#[0.27675829405549707, 0.2115295958333263],
#[0.28207323635005405, 0.18359172468558427],
#[0.28662890117396006, 0.1596449779874547],
#[0.2911845659978661, 0.13569823128932512],
#[0.29574023082177203, 0.11175148459119555],
#[0.3010568291195365, 1.7501080711874692],
#[0.30637177141409355, 1.7221702000394998],
#[0.31168671370865053, 1.6942323288917578],
##[LSEE (exponential part aka 2nd half)],
#[0.31782951556509365, 3.380530973451414],
#[0.3180369708953244, 6.7610619469026005],
#[0.3182789766342745, 10.141592920354014],
#[0.3184520344337006, 16.902654867256615],
#[0.3186596426418461, 23.663716814159216],
#[0.31890180125871087, 30.424778761061816],
#[0.3190402322104603, 35.49557522123882],
#[0.3191788160401244, 43.94690265486702],
#[0.3193171705529165, 47.32743362831843],
#[0.31945552506570857, 50.70796460177007],
#[0.3195940324564153, 57.46902654867267],
#[0.3196979894384027, 64.23008849557527],
#[0.3198019464203901, 70.99115044247787],
#[0.31990590340237757, 77.75221238938025],
#[0.32007911407971834, 87.89380530973449],
#[0.32018307106170574, 94.65486725663709],
#[0.3203217313303272, 104.7964601769911],
#[0.3205987461117407, 118.3185840707963],
#[0.3207721096669962, 131.84070796460196],
#[0.3209801765088857, 148.74336283185812],
#[0.32115369294205587, 165.64601769911496],
#[0.32132705649731136, 179.1681415929204],
#[0.3215348175833715, 189.30973451327418],
#[0.321708181138627, 202.83185840707984],
#[0.32181244387644375, 216.3539823008848],
#[0.3219512570229799, 229.87610619469024],
#[0.322090070169516, 243.39823008849544],
#[0.32226358660268617, 260.3008849557523],
#[0.3224023997492223, 273.8230088495575],
#[0.32254136577367315, 290.7256637168141],
#[0.3227148822068433, 307.6283185840707],
#[0.3229231019266475, 327.91150442477874],
#[0.32309677123773234, 348.19469026548677],
#[0.32323589014009785, 368.47787610619457],
#[0.32344395698198736, 385.3805309734514],
#[0.3236176262930722, 405.6637168141592],
#[0.3237220419088037, 422.56637168141606],
#[0.3238264575245352, 439.46902654867245],
#[0.32393102601818136, 459.7522123893805],
#[0.32413909286007087, 476.6548672566371],
#[0.32424350847580236, 493.55752212389393],
#[0.32434777121361913, 507.07964601769913],
#[0.32448658436015526, 520.6017699115043],
#[0.32462570326252077, 540.8849557522124],
#[0.32476497504280094, 564.5486725663716],
#[0.32490409394516645, 584.8318584070796],
#[0.32507822188999536, 615.2566371681417],
#[0.32525204407899494, 638.9203539823011],
#[0.32542601914590913, 665.9646017699115],
#[0.3255999942128234, 693.0088495575221],
#[0.32573941887101826, 720.0530973451328],
#[0.32587884352921315, 747.0973451327434],
#[0.32605297147404205, 777.5221238938054],
#[0.3262269465409563, 804.5663716814158],
#[0.3264357777724192, 838.3716814159293],
#[0.32661005859516284, 872.1769911504427],
#[0.32678433941790647, 905.9823008849557],
#[0.32692376407610135, 933.0265486725664],
#[0.3270283325697475, 953.3097345132744],
#[0.3272024605145764, 983.7345132743365],
#[0.3273071818861373, 1007.3982300884957],
#[0.3274119032576981, 1031.061946902655],
#[0.32755086928214894, 1047.9646017699117],
#[0.3276901410624291, 1071.628318584071],
#[0.32782987147645337, 1105.4336283185842],
#[0.3279347457259289, 1132.4778761061948],
#[0.3280740175062091, 1156.141592920354],
#[0.3282479925731233, 1183.1858407079649],
#[0.32835301970051356, 1213.6106194690267],
#[0.32849259723662316, 1244.0353982300887],
#[0.328597318608184, 1267.699115044248],
#[0.3287023457355742, 1298.1238938053098],
#[0.3288417703937691, 1325.1681415929206],
#[0.32894633888741526, 1345.4513274336284],
#[0.32901635697234205, 1365.7345132743365],
#[0.3291213840997323, 1396.1592920353983],
#[0.3292608087579272, 1423.2035398230091],
#[0.32940023341612207, 1450.2477876106195],
#[0.32950526054351226, 1480.6725663716816],
#[0.3296445323237925, 1504.3362831858408],
#[0.3297497123290974, 1538.1415929203542],
#[0.3298198832919389, 1561.8053097345137],
#[0.32995946082804845, 1592.2300884955755],
#[0.33009888548624333, 1619.2743362831861],
#[0.33016905644908484, 1642.9380530973453],
#[0.330273624942731, 1663.2212389380534],
#[0.3303437959055725, 1686.8849557522126],
#[0.3303789578259506, 1700.407079646018],
#[0.3304141197463287, 1713.9292035398232],
#[0.33048383207542614, 1727.4513274336286],
#[0.3305535444045236, 1740.9734513274338],
#[0.3306237153673651, 1764.637168141593],
#[0.3306938863302066, 1788.3008849557525],
#[0.3308331581104868, 1811.9646017699117],
#[0.3309031761954136, 1832.2477876106198],
#[0.3309383381157917, 1845.7699115044252],
#[0.3309738057919992, 1866.053097345133],
#[0.33107822140773063, 1882.9557522123896],
#[0.3311486981264015, 1913.3805309734516],
#CE
    [0.04582478125395567, 3.213459516298599],
[0.04610091775880713, 32.13459516298644],
[0.04610221824470126, 61.05573080967406],
[0.04665319076851007, 89.97686645636168],
[0.0470667452828402, 118.89800210304907],
[0.04734259279082631, 141.39221871713949],
[0.04775600280672377, 167.09989484752873],
[0.04816970181948659, 199.23449001051495],
[0.0483082758164267, 224.9421661409042],
[0.04858441232127817, 253.8633017875918],
[0.04913552934351967, 285.99789695057825],
[0.0495490838578498, 314.91903259726587],
[0.0499629273690453, 350.2670872765509],
[0.050514188889719466, 385.61514195583595],
[0.05092788790248229, 417.7497371188224],
[0.05134173141367779, 453.0977917981072],
[0.05175543042644061, 485.2323869610934],
[0.05244425445502614, 523.7939011566771],
[0.052995515975700305, 559.1419558359621],
[0.05340950398532848, 597.7034700315457],
[0.0542363240171234, 649.1188222923238],
[0.05492529254414161, 690.893796004206],
[0.05575211257593653, 742.3091482649843],
[0.056303374096610695, 777.6572029442691],
[0.05671678411250816, 803.3648790746583],
[0.05726761213788428, 829.0725552050474],
[0.05781844016326042, 854.7802313354364],
[0.05850711969341327, 890.1282860147212],
[0.059058670210952804, 931.9032597266034],
[0.0596096427347616, 960.8243953732913],
[0.06016018176327238, 980.1051524710831],
[0.06057344728073716, 1002.5993690851735],
[0.0609866405489856, 1023.4868559411146],
[0.06167495883305675, 1050.801261829653],
[0.062363277117127885, 1078.1156677181912],
[0.06277654263459267, 1100.6098843322818],
[0.06332744290918514, 1127.9242902208202],
[0.06401568894403994, 1153.6319663512093],
[0.06456666146784876, 1182.553101997897],
[0.06539247001061492, 1211.4742376445847],
[0.0660808605439024, 1240.3953732912723],
[0.06690666908666855, 1269.31650893796],
[0.06759477062309067, 1291.8107255520504],
[0.06828272766108012, 1311.0914826498422],
[0.0688332666895909, 1330.372239747634],
[0.06979634874340304, 1356.0799158780233],
[0.07062186828930385, 1378.5741324921137],
[0.07144724333677197, 1397.8548895899053],
[0.0722728351318891, 1421.955835962145],
[0.07309813793014087, 1439.6298633017877],
[0.07392336847917633, 1455.6971608832807],
[0.07502357954560178, 1474.9779179810726],
[0.07626113637228958, 1492.6519453207152],
[0.07804836523689207, 1510.3259726603576],
[0.07928570531593085, 1523.179810725552],
[0.08093493817732395, 1528],
[0.08217184476106468, 1531.2134595162986],
[0.08313362632898272, 1528],
[0.08464500768559909, 1523.179810725552],
[0.08601882653430412, 1515.1461619348054],
[0.08711759261640278, 1502.292323869611],
[0.08821614195085242, 1484.6182965299686],
[0.08917749002347243, 1471.764458464774],
[0.09027611160713842, 1455.6971608832807],
[0.09137458869237171, 1436.416403785489],
[0.0927474683012643, 1407.4952681388013],
[0.09370816613093724, 1380.180862250263],
[0.09480620972087252, 1351.2597266035752],
[0.0959041088123751, 1319.1251314405888],
[0.09645240811517933, 1288.597266035752],
[0.09727576018458993, 1262.8895899053628],
[0.09809882325713518, 1230.7549947423763],
[0.09864762830445378, 1211.4742376445847],
[0.09919614435490703, 1185.7665615141955],
[0.09988236741170432, 1166.4858044164039],
[0.10029375444954426, 1147.2050473186118],
[0.10097997750634154, 1127.9242902208202],
[0.10125380203627013, 1105.4300736067298],
[0.10193959159776939, 1076.508937960042],
[0.10248781865135727, 1044.3743427970558],
[0.10331117072076787, 1018.6666666666667],
[0.10372226876174244, 992.9589905362776],
[0.1044080583232417, 964.0378548895899],
[0.10495628537682959, 931.9032597266034],
[0.10536723891937148, 902.9821240799158],
[0.10605302848087071, 874.060988433228],
[0.1064641265218453, 848.353312302839],
[0.10673787880255754, 824.2523659305994],
[0.10714904909274846, 800.1514195583597],
[0.10756029163215572, 777.6572029442691],
[0.10783411616208431, 755.1629863301787],
[0.10838263221253755, 729.4553101997897],
[0.10879401925037749, 710.1745531019978],
[0.10906784378030608, 687.6803364879074],
[0.10961635983075935, 661.9726603575182],
[0.11002745787173392, 636.2649842271292],
[0.11043841141427582, 607.3438485804415],
[0.11084936495681771, 578.4227129337539],
[0.11126060749622498, 555.9284963196635],
[0.11180912354667823, 530.2208201892745],
[0.11208265907974145, 501.29968454258665],
[0.11249361262228334, 472.37854889589903],
[0.11276743715221194, 449.8843322818084],
[0.11304097268527517, 420.96319663512077],
[0.11345221522468242, 398.4689800210306],
[0.113726039754611, 375.9747634069399],
[0.11413728229401827, 353.4805467928495],
[0.11454852483342554, 330.9863301787591],
[0.11468478685544277, 305.2786540483701],
[0.11482104887745999, 279.57097791798105],
[0.11536956492791325, 253.8633017875918],
[0.11550611594679584, 234.5825446898],
[0.11577994047672444, 212.08832807570957],
[0.11619118301613168, 189.59411146161915],
[0.11646515204449295, 170.31335436382733],
[0.11673897657442153, 147.8191377497369],
[0.11701251210748477, 118.89800210304907],
[0.11728633663741335, 96.4037854889591],
[0.11756030566577462, 77.12302839116728],
[0.11783398569727052, 51.415352260778036],
[0.1182450837382451, 25.707676130389018],
[0.11851905276660638, 6.426919032597198],
[0.11810809922406447, 35.34805467928504],
[0.11769700118308989, 61.05573080967406],
[0.07708607792445965, 1502.292323869611],
[0.08011035787123556, 1526.3932702418506],
[0.08162210047393365, 1529.6067297581494],
[0.08395806213663841, 1526.3932702418506],
[0.08546937124403844, 1519.9663512092534],
[0.05382291400122595, 623.4111461619348],
[0.05464958953458818, 671.6130389064142],
[0.05533870256003906, 716.601472134595]
    ])

    length = data[:,0]
    tension = data[:,1]
    max_tension = max(tension)
    length_idx = np.argmax(tension)
    length_max_tension = length[length_idx]
    norm_length = length/length_max_tension
    norm_tension = tension/max_tension

    centres = np.arange(min(norm_length)+0.1, max(norm_length), .2)
    width = .15
    result = Regression(norm_length, norm_tension, centres, width, .1, sigmoids=False)

    return result

    
force_length_regression = get_muscle_force_length_regression()


def force_length_muscle(lm):
    """
    :param lm: muscle (contractile element) length
    :return: force-length scale factor
    """
    return force_length_regression.eval(lm)


########################################################################################################################
if __name__ == "__main__":
    plot_curves()



